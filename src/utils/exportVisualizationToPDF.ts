import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

export interface ExportOptions {
  filename?: string;
  title?: string;
  userName?: string;
}

const cleanTitle = (title: string): string => {
  let cleaned = title;

  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = title;
  cleaned = tempDiv.textContent || tempDiv.innerText || title;

  cleaned = cleaned.replace(/[\u{1F300}-\u{1F9FF}]/gu, '');
  cleaned = cleaned.replace(/[\u{2600}-\u{26FF}]/gu, '');
  cleaned = cleaned.replace(/[\u{2700}-\u{27BF}]/gu, '');
  cleaned = cleaned.replace(/[^\x00-\x7F]/g, '');

  cleaned = cleaned.replace(/^[^a-zA-Z0-9]+/, '');

  cleaned = cleaned.trim();

  if (cleaned.length > 60) {
    cleaned = cleaned.substring(0, 60) + '...';
  }

  return cleaned || 'Visualization Report';
};

export const exportVisualizationToPDF = async (
  element: HTMLElement,
  options: ExportOptions = {}
): Promise<void> => {
  try {
    const {
      filename = 'visualization',
      title = 'Visualization Report',
      userName = 'User'
    } = options;

    const cleanedTitle = cleanTitle(title);

    const canvas = await html2canvas(element, {
      scale: 3,
      useCORS: true,
      logging: false,
      backgroundColor: '#1f2937',
      windowWidth: element.scrollWidth,
      windowHeight: element.scrollHeight,
      imageTimeout: 0
    });

    const imgWidth = 210;
    const pageHeight = 297;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;

    const pdf = new jsPDF({
      orientation: imgHeight > imgWidth ? 'portrait' : 'landscape',
      unit: 'mm',
      format: 'a4'
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const actualPageHeight = pdf.internal.pageSize.getHeight();

    pdf.setFillColor(31, 41, 55);
    pdf.rect(0, 0, pageWidth, actualPageHeight, 'F');

    pdf.setTextColor(255, 255, 255);
    pdf.setFontSize(16);
    const titleLines = pdf.splitTextToSize(cleanedTitle, pageWidth - 20);
    pdf.text(titleLines, pageWidth / 2, 15, { align: 'center' });

    const titleHeight = 15 + (titleLines.length - 1) * 5;

    pdf.setFontSize(9);
    pdf.setTextColor(156, 163, 175);
    const currentDate = new Date().toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    pdf.text(`Generated: ${currentDate}`, pageWidth / 2, titleHeight + 7, { align: 'center' });
    pdf.text(`User: ${userName}`, pageWidth / 2, titleHeight + 12, { align: 'center' });

    pdf.setDrawColor(75, 85, 99);
    pdf.setLineWidth(0.5);
    pdf.line(10, titleHeight + 15, pageWidth - 10, titleHeight + 15);

    const imgData = canvas.toDataURL('image/png');

    const marginTop = titleHeight + 20;
    const marginBottom = 12;
    const marginSides = 5;
    const availableHeight = actualPageHeight - marginTop - marginBottom;
    const availableWidth = pageWidth - (marginSides * 2);

    let finalImgWidth = availableWidth;
    let finalImgHeight = (canvas.height * finalImgWidth) / canvas.width;

    if (finalImgHeight > availableHeight) {
      finalImgHeight = availableHeight;
      finalImgWidth = (canvas.width * finalImgHeight) / canvas.height;
    }

    const xPosition = (pageWidth - finalImgWidth) / 2;
    const yPosition = marginTop;

    pdf.addImage(imgData, 'PNG', xPosition, yPosition, finalImgWidth, finalImgHeight);

    pdf.setFontSize(8);
    pdf.setTextColor(107, 114, 128);
    pdf.text(
      'Generated by Astra Intelligence - RocketHub',
      pageWidth / 2,
      actualPageHeight - 8,
      { align: 'center' }
    );

    const sanitizedFilename = filename
      .replace(/[^a-z0-9]/gi, '-')
      .replace(/-+/g, '-')
      .toLowerCase();

    const timestamp = new Date().toISOString().split('T')[0];
    const finalFilename = `${sanitizedFilename}-${timestamp}.pdf`;

    pdf.save(finalFilename);

    return Promise.resolve();
  } catch (error) {
    console.error('Failed to export PDF:', error);
    throw new Error('Failed to generate PDF. Please try again.');
  }
};
