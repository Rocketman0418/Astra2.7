import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

export interface ExportOptions {
  filename?: string;
  title?: string;
  userName?: string;
}

const cleanTitle = (title: string): string => {
  let cleaned = title;

  const tempDiv = document.createElement('div');
  tempDiv.innerHTML = title;
  cleaned = tempDiv.textContent || tempDiv.innerText || title;

  cleaned = cleaned.replace(/[\u{1F300}-\u{1F9FF}]/gu, '');
  cleaned = cleaned.replace(/[\u{2600}-\u{26FF}]/gu, '');
  cleaned = cleaned.replace(/[\u{2700}-\u{27BF}]/gu, '');
  cleaned = cleaned.replace(/[^\x00-\x7F]/g, '');

  cleaned = cleaned.replace(/^[^a-zA-Z0-9]+/, '');

  cleaned = cleaned.trim();

  if (cleaned.length > 60) {
    cleaned = cleaned.substring(0, 60) + '...';
  }

  return cleaned || 'Visualization Report';
};

const addHeader = (
  pdf: jsPDF,
  cleanedTitle: string,
  userName: string,
  pageWidth: number,
  isFirstPage: boolean = true
): number => {
  if (isFirstPage) {
    pdf.setTextColor(255, 255, 255);
    pdf.setFontSize(16);
    const titleLines = pdf.splitTextToSize(cleanedTitle, pageWidth - 20);
    pdf.text(titleLines, pageWidth / 2, 15, { align: 'center' });

    const titleHeight = 15 + (titleLines.length - 1) * 5;

    pdf.setFontSize(9);
    pdf.setTextColor(156, 163, 175);
    const currentDate = new Date().toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
    pdf.text(`Generated: ${currentDate}`, pageWidth / 2, titleHeight + 7, { align: 'center' });
    pdf.text(`User: ${userName}`, pageWidth / 2, titleHeight + 12, { align: 'center' });

    pdf.setDrawColor(75, 85, 99);
    pdf.setLineWidth(0.5);
    pdf.line(10, titleHeight + 15, pageWidth - 10, titleHeight + 15);

    return titleHeight + 20;
  } else {
    pdf.setFontSize(10);
    pdf.setTextColor(156, 163, 175);
    pdf.text(cleanedTitle, pageWidth / 2, 10, { align: 'center' });

    pdf.setDrawColor(75, 85, 99);
    pdf.setLineWidth(0.3);
    pdf.line(10, 13, pageWidth - 10, 13);

    return 18;
  }
};

const addFooter = (pdf: jsPDF, pageWidth: number, pageHeight: number, pageNum: number, totalPages: number): void => {
  pdf.setFontSize(8);
  pdf.setTextColor(107, 114, 128);
  pdf.text(
    'Generated by Astra Intelligence - RocketHub',
    pageWidth / 2,
    pageHeight - 8,
    { align: 'center' }
  );

  pdf.setFontSize(7);
  pdf.text(
    `Page ${pageNum} of ${totalPages}`,
    pageWidth / 2,
    pageHeight - 3,
    { align: 'center' }
  );
};

export const exportVisualizationToPDF = async (
  element: HTMLElement,
  options: ExportOptions = {}
): Promise<void> => {
  try {
    const {
      filename = 'visualization',
      title = 'Visualization Report',
      userName = 'User'
    } = options;

    const cleanedTitle = cleanTitle(title);

    const canvas = await html2canvas(element, {
      scale: 3,
      useCORS: true,
      logging: false,
      backgroundColor: '#1f2937',
      windowWidth: element.scrollWidth,
      windowHeight: element.scrollHeight,
      imageTimeout: 0
    });

    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });

    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    const marginSides = 10;
    const marginBottom = 15;
    const contentWidth = pageWidth - (marginSides * 2);

    const pxToMm = 0.264583;
    const desiredWidthPx = canvas.width;
    const desiredWidthMm = contentWidth;
    const scaleFactor = desiredWidthMm / (desiredWidthPx * pxToMm);

    const imgWidthMm = contentWidth;
    const imgHeightMm = (canvas.height * pxToMm * scaleFactor);

    const imgData = canvas.toDataURL('image/png');

    let currentY = 0;
    let remainingHeight = imgHeightMm;
    let sourceY = 0;
    let pageNum = 1;
    let isFirstPage = true;

    const tempPages: Array<{ startY: number; endY: number; isFirst: boolean }> = [];

    while (remainingHeight > 0) {
      const headerHeight = isFirstPage ? 35 : 18;
      const availableHeight = pageHeight - headerHeight - marginBottom;

      const heightToAdd = Math.min(remainingHeight, availableHeight);

      tempPages.push({
        startY: sourceY,
        endY: sourceY + heightToAdd,
        isFirst: isFirstPage
      });

      sourceY += heightToAdd;
      remainingHeight -= heightToAdd;
      isFirstPage = false;
      pageNum++;
    }

    const totalPages = tempPages.length;

    tempPages.forEach((page, index) => {
      if (index > 0) {
        pdf.addPage();
      }

      pdf.setFillColor(31, 41, 55);
      pdf.rect(0, 0, pageWidth, pageHeight, 'F');

      const headerHeight = addHeader(pdf, cleanedTitle, userName, pageWidth, page.isFirst);

      const sourceHeight = page.endY - page.startY;
      const sourceHeightPx = sourceHeight / (pxToMm * scaleFactor);
      const sourceYPx = page.startY / (pxToMm * scaleFactor);

      pdf.addImage(
        imgData,
        'PNG',
        marginSides,
        headerHeight,
        imgWidthMm,
        sourceHeight,
        undefined,
        'FAST',
        0,
        sourceYPx,
        canvas.width,
        sourceHeightPx
      );

      addFooter(pdf, pageWidth, pageHeight, index + 1, totalPages);
    });

    const sanitizedFilename = filename
      .replace(/[^a-z0-9]/gi, '-')
      .replace(/-+/g, '-')
      .toLowerCase();

    const timestamp = new Date().toISOString().split('T')[0];
    const finalFilename = `${sanitizedFilename}-${timestamp}.pdf`;

    pdf.save(finalFilename);

    return Promise.resolve();
  } catch (error) {
    console.error('Failed to export PDF:', error);
    throw new Error('Failed to generate PDF. Please try again.');
  }
};
